{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "342f6079-65ed-4fc7-8866-6798dd31c67b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import socket\n",
    "import threading\n",
    "import sys\n",
    "import pickle\n",
    "import os\n",
    "import random\n",
    "import math\n",
    "import multiprocessing as mp\n",
    "import time\n",
    "\n",
    "class Servidor():#Creamos la clase servidor\n",
    "\tdef sec_mult(A,B): #f() que calcula la mult. en secuencial, como toda la vida se ha hecho\n",
    "    C = [[0] * n_col_B for i in range (n_fil_A)] #Crear y probar la matrix C=A*B\n",
    "    for i in range(n_fil_A): #Hago la multiplicación de A*B = C, i para iterar sobre las filas de A\n",
    "        for j in range(n_col_B): # j para iterar sobre las columnas de B\n",
    "            for k in range(n_col_A): # k para iterar en C\n",
    "                C[i][j] += A[i][k] * B [k][j]# Aqui se hace la multiplicación y guardo en C\n",
    "    return C\n",
    "    \n",
    "    def par_mult(A,B):\n",
    "    n_cores = mp.cpu_count()\n",
    "    size_col = math.ceil(n_col_B/n_cores)\n",
    "    size_fil = math.ceil(n_fil_A/n_cores)\n",
    "    MC = mp.RawArray('i', n_fil_A * n_col_B)\n",
    "    cores = []\n",
    "    for core in range(n_cores):\n",
    "        i_MC = min(core * size_fil, n_fil_A)\n",
    "        f_MC = min((core+1) * size_fil, n_fil_A)\n",
    "        cores.append(mp.Process(target=par_core, args=(A, B, MC, i_MC, f_MC)))\n",
    "        for core in cores:\n",
    "            core.start()\n",
    "        for core in cores:\n",
    "            core.join()\n",
    "        C_2D = [[0] * n_col_B for i in range(n_fil_A)]\n",
    "        for i in range(n_fil_A):\n",
    "            for j in range(n_col_B):\n",
    "                C_2D[i][j] = MC[i*n_col_B + j]\n",
    "        return C_2D                      \n",
    "\n",
    "    def par_core(A,B,MC, i_MC, f_MC): #La tarea que hacen todos los cores\n",
    "    for i in range(i_MC, f_MC): # Size representando en colores en el excel que itera sobre las filas en A\n",
    "        for j in range(len(B[0])): #Size representando en colores en el excel que itera sobre las columnas en B\n",
    "            for k in range(len(A[0])): #n_fil_B o lo que es lo mismo el n_col_A\n",
    "                MC[i*len(B[0]) + j] += A[i][k] * B[k][j] #guarda el resultado en MC[] de cada core\n",
    "                \n",
    "    if __name__== '__main__':\n",
    "    A = [[random.randint(0,1) for i in range (6872)] for j in range (200)]#Genero A[22166872]\n",
    "    B = [[random.randint(0,1) for i in range(200)] for j in range (6)]\n",
    "    n_fil_A = len(A)\n",
    "    n_col_A = len(A[0])\n",
    "    n_fil_B = len(B)\n",
    "    n_col_B = len(B[0])\n",
    "    if n_col_A != n_fil_B: raise Exception('Dimensiones no válidas')\n",
    "    inicioS = time.time()\n",
    "    sec_mult(A, B)\n",
    "    finS = time.time()\n",
    "    inicioP = time.time()\n",
    "    par_mult(A, B)\n",
    "    finP = time.time()\n",
    "    print('\\n\\nMatriz A y B se han multiplicado con exito en SECUENCIAL ha tardado', finS-inicioS,' y en PARALELO' , finP-inicioP)\n",
    "    \n",
    "\tdef __init__(self, host=socket.gethostname(), port=int(input(\"Que puerto quiere usar ? \"))):#Función que va a pedir al usuario el puerto que quiere usar\n",
    "\t\tself.clientes = []#Creamos array de clientes\n",
    "\t\tself.name =[]#Creamos array de nombres\n",
    "\t\tprint('\\nSu IP actual es : ',socket.gethostbyname(host))#Muestra la IP actual \n",
    "\t\tprint('\\n\\tProceso con PID = ',os.getpid(), '\\n\\tHilo PRINCIPAL con ID =',threading.currentThread().getName(), '\\n\\tHilo en modo DAEMON = ', threading.currentThread().isDaemon(), '\\n\\tTotal Hilos activos en este punto del programa =', threading.active_count())#Muestra los hilos totales del programa\n",
    "\t\tself.s = socket.socket()\n",
    "\t\tself.s.bind((str(host), int(port)))#Enlaza el host y el puerto\n",
    "\t\tself.s.listen(30)\n",
    "\t\tself.s.setblocking(False)\n",
    "\t\t\n",
    "\n",
    "\t\tthreading.Thread(target=self.aceptarC, daemon=True).start()\n",
    "\t\tthreading.Thread(target=self.procesarC, daemon=True).start()\n",
    "\n",
    "\t\twhile True:\n",
    "\t\t\tmsg = input('\\n << SALIR = 1 >> \\n')#Cerrar el servidor pulsando 1\n",
    "\t\t\tif msg == '1':\n",
    "\t\t\t\tprint(\" **** Me piro vampiro; cierro socket y mato SERVER con PID = \", os.getpid())#Mensaje que le va a salir al usuario cuando cierre el servidor\n",
    "\t\t\t\tself.s.close()\n",
    "\t\t\t\tsys.exit()\n",
    "\t\t\telse: pass\n",
    "\n",
    "\tdef aceptarC(self):#Función que sirve para aceptar el mensaje enviado por el cliente\n",
    "\t\tprint('\\nHilo ACEPTAR con ID =',threading.currentThread().getName(), '\\n\\tHilo en modo DAEMON = ', threading.currentThread().isDaemon(),'\\n\\tPertenece al PROCESO con PID', os.getpid(), \"\\n\\tHilos activos TOTALES \", threading.active_count())#Muestra los hilos totales\n",
    "\t\t\n",
    "\t\twhile True:\n",
    "\t\t\ttry:\n",
    "\t\t\t\tconn, addr = self.s.accept()\n",
    "\t\t\t\tprint(f\"\\nConexion aceptada via {addr}\\n\")#Conexion aceptada\n",
    "\t\t\t\tconn.setblocking(False)\n",
    "\t\t\t\tself.clientes.append(conn)\n",
    "\t\t\t\tdata = conn.recv(32).decode()\n",
    "\t\t\t\tif data:#Creamos un if para ver si el nickname es aceptado o no por el servidor\n",
    "\t\t\t\t\tname = data\n",
    "\t\t\t\t\tprint(\"Nickname aceptado\" , name)\n",
    "\t\t\t\t\tself.name.append(name)\n",
    "\t\t\texcept: pass\n",
    "\n",
    "\tdef procesarC(self):#Creamos la función procesar los mensajes que va recibiendo del cliente\n",
    "\t\tprint('\\nHilo PROCESAR con ID =',threading.currentThread().getName(), '\\n\\tHilo en modo DAEMON = ', threading.currentThread().isDaemon(),'\\n\\tPertenece al PROCESO con PID', os.getpid(), \"\\n\\tHilos activos TOTALES \", threading.active_count())#Ver hilos totales\n",
    "\t\twhile True:\n",
    "\t\t\tif len(self.clientes) > 0:\n",
    "\t\t\t\tfor c in self.clientes:\n",
    "\t\t\t\t\ttry:\n",
    "\t\t\t\t\t\tdata = c.recv(32)\n",
    "\t\t\t\t\t\tif data: self.broadcast(data,c)\n",
    "\t\t\t\t\t\twith open('ue22166872AI1.txt', 'a') as f:#Creamos el txt para ir añadiendo todos los mensajes que vaya recibiendo el servidor\n",
    "\t\t\t\t\t\t\tf.write(pickle.loads(data) + '\\n')#Los va poniendo uno detrás de otro\n",
    "\t\t\t\t\texcept: pass\n",
    "\n",
    "\tdef broadcast(self, msg, cliente):#Función para ver los clientes conectados e imprimir sus nicknames\n",
    "\t\tfor c in self.clientes:\n",
    "\t\t\tprint(\"Clientes conectados Right now = \", len(self.clientes), ' ',self.name, '\\tMensaje de: ', pickle.loads(msg))#Imprime el nickname del cliente que ha escrito el mensaje\n",
    "\t\t\ttry:\n",
    "\t\t\t\tif c != cliente: \n",
    "\t\t\t\t\t\n",
    "\t\t\t\t\tc.send(msg)\n",
    "\t\t\texcept: self.clientes.remove(c)\n",
    "\n",
    "arrancar = Servidor() #Función para arrancar el servidor"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
